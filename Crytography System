import os
import logging
from liboqs import KEMs

# Configure logging
logging.basicConfig(level=logging.INFO)

class QuantumResistantCryptographySystem:
    def __init__(self):
        self.oqs_kem_alg = os.getenv('OQS_KEM_ALG', 'Kyber1024')
        self.kem = self.initialize_oqs_kem()

    def initialize_oqs_kem(self):
        """Initialize a quantum-resistant KEM."""
        try:
            kem = KEMs(self.oqs_kem_alg)
            logging.info(f"liboqs KEM {self.oqs_kem_alg} initialized.")
            return kem
        except Exception as e:
            logging.error(f"Error initializing liboqs KEM: {e}")
            raise

    def generate_keypair(self):
        """Generate a keypair for the KEM."""
        public_key, secret_key = self.kem.keypair()
        return public_key, secret_key

    def encapsulate_key(self, public_key):
        """Encapsulate a key using the recipient's public key."""
        ciphertext, shared_secret = self.kem.encap_secret(public_key)
        return ciphertext, shared_secret

    def decapsulate_key(self, secret_key, ciphertext):
        """Decapsulate the ciphertext using the recipient's secret key to obtain the shared secret."""
        shared_secret = self.kem.decap_secret(secret_key, ciphertext)
        return shared_secret

# Example usage
if __name__ == "__main__":
    try:
        qr_crypto_system = QuantumResistantCryptographySystem()
        public_key, secret_key = qr_crypto_system.generate_keypair()
        
        # Simulate key encapsulation (e.g., Alice sending to Bob)
        ciphertext, shared_secret_sender = qr_crypto_system.encapsulate_key(public_key)
        
        # Simulate key decapsulation (e.g., Bob receiving from Alice)
        shared_secret_recipient = qr_crypto_system.decapsulate_key(secret_key, ciphertext)
        
        assert shared_secret_sender == shared_secret_recipient, "Shared secrets do not match!"
        logging.info("Quantum-resistant key exchange successful.")
    except Exception as e:
        logging.error(f"An error occurred: {e}")
