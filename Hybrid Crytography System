import os
from cryptography.hazmat.primitives.asymmetric import rsa
from liboqs import KEMs
import logging
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import BestAvailableEncryption

# Configure logging
logging.basicConfig(level=logging.INFO)

class HybridCryptographySystem:
    def __init__(self):
        # Use environment variables or default to specific values
        self.rsa_key_size = int(os.getenv('RSA_KEY_SIZE', '4096'))
        self.oqs_kem_alg = os.getenv('OQS_KEM_ALG', 'Kyber1024')
        self.rsa_private_key, self.rsa_public_key = self.generate_rsa_keys()
        self.oqs_kem = self.initialize_oqs_kem()

    def generate_rsa_keys(self):
        """Generate RSA keys with enhanced classical security settings."""
        try:
            private_key = rsa.generate_private_key(public_exponent=65537, key_size=self.rsa_key_size)
            public_key = private_key.public_key()
            logging.info("RSA keys generated successfully.")
            return private_key, public_key
        except Exception as e:
            logging.error(f"Error generating RSA keys: {e}")
            raise

    def initialize_oqs_kem(self):
        """Initialize a quantum-resistant KEM."""
        try:
            kem = KEMs(self.oqs_kem_alg)
            logging.info(f"liboqs KEM initialized with {self.oqs_kem_alg}.")
            return kem
        except Exception as e:
            logging.error(f"Error initializing liboqs KEM: {e}")
            raise

def export_private_key(private_key, password):
    """Securely export the private key with encryption."""
    encrypted_private_key = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=BestAvailableEncryption(password.encode('utf-8'))
    )
    # Implement secure storage for the encrypted_private_key here.

    # Memory handling for sensitive information
    try:
        # Attempt to clear sensitive information from memory
        del encrypted_private_key
    except Exception as e:
        logging.warning(f"Failed to clear private key from memory: {e}")

if __name__ == "__main__":
    try:
        system = HybridCryptographySystem()
        password = os.getenv('PRIVATE_KEY_PASSWORD', 'default_secure_password')
        export_private_key(system.rsa_private_key, password)
    except Exception as e:
        logging.error(f"An error occurred during system initialization or key export: {e}")
